{"version":3,"file":"json-services-client.esm.js","sources":["../src/Messages/AuthResponse.ts","../src/Messages/AuthRequest.ts","../src/EventFilter.ts","../src/Messages/SubscriptionMessage.ts","../src/ClientSubscription.ts","../src/ClientSubscriptionManager.ts","../src/CredentialsBase.ts","../src/Messages/LogoutMessage.ts","../src/PendingMessage.ts","../src/RequestMessage.ts","../src/JsonClient.ts","../src/Messages/VersionResponse.ts","../src/Messages/VersionRequest.ts"],"sourcesContent":["export class AuthResponse {\r\n    public Parameters!: {\r\n        [key: string]: string\r\n    }\r\n\r\n    public SessionId!: string\r\n\r\n    public AuthenticatedIdentity!: {\r\n        Name: string\r\n        AuthenticationType: string\r\n        IsAuthenticated: boolean\r\n    }\r\n}","import { AuthResponse } from \"./AuthResponse\"\r\nimport { IReturn } from \"../IReturn\"\r\n\r\nexport class AuthRequest implements IReturn<AuthResponse> {\r\n    public static userNameKey = \"UserName\"\r\n    public static passwordKey = \"Password\"\r\n    public getTypeName = () => \"rpc.authenticate\"\r\n    public createResponse = () => new AuthResponse()\r\n    public Parameters: {\r\n        [key: string]: string\r\n    } = {}\r\n}\r\n","export interface IEventFilter {\r\n    [key: string]: string | null\r\n}\r\n\r\nexport class EventFilter {\r\n    public static matches(eventFilter?: IEventFilter | null, eventArgs?: { [key: string]: any } | null): boolean {\r\n        // empty filter matches anything\r\n        if (eventFilter === null ||\r\n            eventFilter === undefined ||\r\n            Object.keys(eventFilter).length === 0) {\r\n            return true\r\n        }\r\n\r\n        // empty event arguments doesn't match any filter except for empty filter\r\n        if (eventArgs === null || eventArgs === undefined) {\r\n            return false\r\n        }\r\n\r\n        // match individual properties based on their types\r\n        for (const key in eventFilter) {\r\n            // check eventFilter's own properties\r\n            if (Object.prototype.hasOwnProperty.call(eventFilter, key)) {\r\n                const filterValue = eventFilter[key] || \"\"\r\n                const propertyValue = eventArgs[key]\r\n                if (!this.valueMatches(filterValue, propertyValue)) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    public static valueMatches(filterValue: string, propertyValue: any) {\r\n        // property not found\r\n        if (propertyValue === undefined) {\r\n            return false\r\n        }\r\n\r\n        // empty filter matches anything\r\n        if ((filterValue || \"\") === \"\") {\r\n            return true\r\n        }\r\n\r\n        // match based on the property value type\r\n        if (filterValue === (propertyValue || \"\").toString()) {\r\n            return true\r\n        } else if (typeof propertyValue === \"string\") {\r\n            return this.stringMatches(filterValue, propertyValue)\r\n        } else if (typeof propertyValue === \"number\") {\r\n            return this.numberMatches(filterValue, propertyValue)\r\n        } else if (typeof propertyValue === \"boolean\") {\r\n            return this.boolMatches(filterValue, propertyValue)\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    public static stringMatches(filterValue?: string | null, propertyValue?: string | null) {\r\n        // avoid null and undefined\r\n        filterValue = (filterValue || \"\").toLowerCase()\r\n        propertyValue = (propertyValue || \"\").toLowerCase()\r\n        return propertyValue.indexOf(filterValue) >= 0\r\n    }\r\n\r\n    public static numberMatches(filterValue?: string | null, propertyValue?: number | null) {\r\n        // avoid null and undefined\r\n        filterValue = filterValue || \"\"\r\n        if (filterValue === \"\") {\r\n            return true\r\n        }\r\n\r\n        const value = propertyValue || \"\"\r\n        const parts = filterValue.toLowerCase().split(\",\")\r\n        return parts.findIndex(v => v === value.toString()) >= 0\r\n    }\r\n\r\n    public static boolMatches(filterValue?: string | null, propertyValue?: boolean | null) {\r\n        // avoid null and undefined\r\n        filterValue = filterValue || \"\"\r\n        if (filterValue === \"\") {\r\n            return true\r\n        }\r\n\r\n        const value = (propertyValue || false).toString().toLowerCase().trim()\r\n        return filterValue.toLowerCase().trim() === value\r\n    }\r\n}","import { IReturnVoid } from \"../IReturn\"\r\n\r\ninterface ISubscription {\r\n    SubscriptionId: string\r\n    Enabled: boolean\r\n    EventName: string\r\n    EventFilter?: {\r\n        [key: string]: string\r\n    }\r\n}\r\n\r\nexport class SubscriptionMessage implements IReturnVoid {\r\n    public static messageName = \"rpc.subscription\"\r\n    public getTypeName = () => SubscriptionMessage.messageName\r\n    public Subscriptions!: ISubscription[]\r\n}\r\n","import { EventFilter } from \"./EventFilter\"\r\nimport { SubscriptionMessage } from \"./Messages/SubscriptionMessage\"\r\n\r\nexport class ClientSubscription {\r\n    public subscriptionId!: string\r\n    public eventName!: string\r\n    public eventHandler!: (eventArgs: object) => void\r\n    public eventFilter?: {\r\n        [key: string]: string;\r\n    }\r\n\r\n    public invoke = (eventArgs: object) => {\r\n        // TODO: handle 'this' context?\r\n        // apply eventFilter locally (we might get events matching other local subscriber's event filter)\r\n        if (EventFilter.matches(this.eventFilter, eventArgs)) {\r\n            this.eventHandler(eventArgs)\r\n        }\r\n    }\r\n\r\n    public createSubscriptionMessage = () => {\r\n        const msg = new SubscriptionMessage()\r\n        msg.Subscriptions = [{\r\n            Enabled: true,\r\n            EventName: this.eventName,\r\n            EventFilter: this.eventFilter,\r\n            SubscriptionId: this.subscriptionId,\r\n        }]\r\n        return msg\r\n    }\r\n\r\n    public createUnsubscriptionMessage = () => {\r\n        const msg = this.createSubscriptionMessage()\r\n        delete msg.Subscriptions[0].EventFilter\r\n        msg.Subscriptions[0].Enabled = false\r\n        return msg\r\n    }\r\n}","import { EventEmitter } from \"eventemitter3\"\r\nimport { ClientSubscription } from \"./ClientSubscription\"\r\n\r\nexport class ClientSubscriptionManager {\r\n    private emitter = new EventEmitter()\r\n    private subscriptions: { [subscriptionId: string]: ClientSubscription; } = {}\r\n\r\n    public add = (subscription: ClientSubscription) => {\r\n        this.subscriptions[subscription.subscriptionId] = subscription\r\n        this.emitter.on(subscription.eventName, subscription.invoke, subscription)\r\n\r\n        return () => {\r\n            delete this.subscriptions[subscription.subscriptionId]\r\n            this.emitter.off(subscription.eventName, subscription.invoke, subscription)\r\n        }\r\n    }\r\n\r\n    public broadcast = (eventName: string, eventArgs: object) => {\r\n        this.emitter.emit(eventName, eventArgs)\r\n    }\r\n}","import { AuthRequest } from \"./Messages/AuthRequest\"\r\nimport { ICredentials } from \"./ICredentials\"\r\nimport { IJsonClient } from \"./IJsonClient\"\r\n\r\nexport class CredentialsBase implements ICredentials {\r\n    constructor(credentials?: {\r\n        userName: string,\r\n        password: string,\r\n    } | undefined) {\r\n        // initialize parameters if specified\r\n        if (credentials) {\r\n            this.parameters[AuthRequest.userNameKey] = credentials.userName\r\n            this.parameters[AuthRequest.passwordKey] = credentials.password\r\n        }\r\n    }\r\n\r\n    public async authenticate(client: IJsonClient): Promise<string> {\r\n        const msg = new AuthRequest()\r\n        msg.Parameters = this.parameters\r\n        const response = await client.call(msg)\r\n        return response.SessionId\r\n    }\r\n\r\n    public parameters: {\r\n        [key: string]: string\r\n    } = {}\r\n}","import { IReturnVoid } from \"../IReturn\"\r\n\r\nexport class LogoutMessage implements IReturnVoid {\r\n    public getTypeName() {\r\n        return \"rpc.logout\"\r\n    }\r\n}","﻿export class PendingMessage {\r\n    constructor(public id: string, public promise?: Promise<any>) {\r\n    }\r\n\r\n    public resolve!: (result: any) => void\r\n    public reject!: (error: any) => void\r\n}\r\n\r\nexport interface IPendingMessageQueue {\r\n    [key: string]: PendingMessage | undefined\r\n}","﻿export class RequestMessage {\r\n    constructor(method: string, params: object, id?: string) {\r\n        this.method = method\r\n        this.params = params\r\n        this.id = id\r\n    }\r\n\r\n    public jsonrpc = \"2.0\"\r\n    public method: string\r\n    public params: object\r\n    public id?: string\r\n}","﻿import WebSocket from \"isomorphic-ws\"\r\nimport { ClientSubscription } from \"./ClientSubscription\"\r\nimport { ClientSubscriptionManager } from \"./ClientSubscriptionManager\"\r\nimport { CredentialsBase } from \"./CredentialsBase\"\r\nimport { ICredentials } from \"./ICredentials\"\r\nimport { IJsonClient } from \"./IJsonClient\"\r\nimport { IReturn, IReturnVoid } from \"./IReturn\"\r\nimport { ISubscription } from \"./ISubscription\"\r\nimport { LogoutMessage } from \"./Messages/LogoutMessage\"\r\nimport { IPendingMessageQueue, PendingMessage } from \"./PendingMessage\"\r\nimport { RequestMessage } from \"./RequestMessage\"\r\n\r\nexport interface IJsonRpcError {\r\n    code: number\r\n    message: string\r\n    data: object\r\n}\r\n\r\nexport interface IJsonClientOptions {\r\n    reconnect: boolean\r\n    reconnectInterval: number\r\n    maxReconnects: number\r\n    credentials?: ICredentials\r\n}\r\n\r\nexport class JsonClient implements IJsonClient {\r\n    constructor(public url: string, private options: IJsonClientOptions = {\r\n        reconnect: true,\r\n        reconnectInterval: 5000,\r\n        maxReconnects: 10,\r\n    }) {\r\n        this.credentials = options.credentials\r\n\r\n        // make sure that this argument stays\r\n        this.call = this.call.bind(this)\r\n        this.notify = this.notify.bind(this)\r\n        this.subscribe = this.subscribe.bind(this)\r\n        this.generateMessageId = this.generateMessageId.bind(this)\r\n        this.nameOf = this.nameOf.bind(this)\r\n    }\r\n\r\n    public connected = false\r\n    public sessionId?: string\r\n    public credentials?: ICredentials\r\n    private webSocket?: WebSocket\r\n    private reconnects = 0\r\n    private pendingMessages: IPendingMessageQueue = {}\r\n\r\n    public traceMessage = (_: { isOutcoming: boolean, data: string }) => {\r\n        // do nothing by default\r\n    }\r\n\r\n    public errorFilter = (_: Error | IJsonRpcError) => {\r\n        // do nothing by default\r\n    }\r\n\r\n    public async disconnect() {\r\n        if (this.webSocket && this.connected) {\r\n            await this.notify(new LogoutMessage())\r\n            this.webSocket.close()\r\n            this.connected = false\r\n            delete this.webSocket\r\n            delete this.connectPromise\r\n        }\r\n    }\r\n\r\n    private rejectPendingMessages(closeEvent: {\r\n        wasClean: boolean;\r\n        code: number;\r\n        reason: string;\r\n        target: WebSocket;\r\n    }) {\r\n        let message = \"Connection was closed.\"\r\n        if (closeEvent.code !== 1000) {\r\n            message = \"Connection was aborted. Error code: \" + closeEvent.code\r\n        }\r\n\r\n        const error = new Error(message)\r\n        Object.defineProperty(error, \"code\", { value: -32003 })\r\n\r\n        for (const messageId in this.pendingMessages) {\r\n            if (Object.prototype.hasOwnProperty.call(this.pendingMessages, messageId)) {\r\n                const pending = this.pendingMessages[messageId]\r\n                if (pending) {\r\n                    // clear pending message\r\n                    delete this.pendingMessages[messageId]\r\n\r\n                    // reject the promise\r\n                    this.errorFilter(error)\r\n                    pending.reject(error)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private connectPromise?: Promise<string>\r\n\r\n    public connect(credentials?: ICredentials): Promise<string> {\r\n        // you only connect once\r\n        if (this.connectPromise) {\r\n            return this.connectPromise\r\n        }\r\n\r\n        // make sure to have some credentials\r\n        const creds: ICredentials = credentials || this.credentials || new CredentialsBase()\r\n\r\n        return this.connectPromise = new Promise<string>((resolve, reject) => {\r\n            // check if already connected\r\n            if (this.webSocket) {\r\n                resolve(this.sessionId)\r\n                return\r\n            }\r\n\r\n            this.webSocket = new WebSocket(this.url)\r\n\r\n            this.webSocket.onerror = (error: any) => {\r\n                this.connected = false\r\n                delete this.webSocket\r\n                delete this.connectPromise\r\n\r\n                let message = \"Couldn't connect to \" + this.url\r\n                if (error.message) {\r\n                    message = message + \": \" + error.message\r\n                }\r\n\r\n                const e = new Error(message)\r\n                this.errorFilter(e)\r\n                reject(e)\r\n            }\r\n\r\n            this.webSocket.onopen = async () => {\r\n                // this is crucial for the subsequent authenticate call\r\n                this.connected = true\r\n                try {\r\n                    // authenticate\r\n                    this.sessionId = await creds.authenticate(this)\r\n\r\n                    // great, now we're connected\r\n                    this.reconnects = 0\r\n                    resolve(this.sessionId)\r\n                } catch (e) {\r\n                    // report failure\r\n                    this.connected = false\r\n                    this.errorFilter(e)\r\n                    reject(e)\r\n                    delete this.webSocket\r\n                    delete this.connectPromise\r\n                }\r\n            }\r\n\r\n            this.webSocket.onclose = (closeEvent: any) => {\r\n                this.connected = false\r\n                this.rejectPendingMessages(closeEvent)\r\n                delete this.webSocket\r\n                delete this.connectPromise\r\n\r\n                if (closeEvent.code === 1000) {\r\n                    resolve(this.sessionId)\r\n                    return // closed normally, don't reconnect\r\n                }\r\n\r\n                this.reconnects++\r\n                if (this.options.reconnect && (this.options.maxReconnects < this.reconnects || this.options.maxReconnects === 0)) {\r\n                    setTimeout(() => this.connect(), this.options.reconnectInterval)\r\n                }\r\n\r\n                resolve(this.sessionId)\r\n            }\r\n\r\n            this.webSocket.onmessage = (message: any) => {\r\n                // trace incoming message\r\n                this.traceMessage({\r\n                    isOutcoming: false,\r\n                    data: message.data.toString(),\r\n                })\r\n\r\n                // if message is binary data, convert it to string\r\n                let json = typeof(message.data) === \"string\" ? message.data : \"\"\r\n                if (message.data instanceof ArrayBuffer) {\r\n                    json = Buffer.from(message.data).toString()\r\n                }\r\n\r\n                // parse message and get its data\r\n                let parsedMessage: {\r\n                    id?: string,\r\n                    method?: string,\r\n                    params?: object,\r\n                    result?: object,\r\n                    error?: IJsonRpcError,\r\n                }\r\n\r\n                try {\r\n                    parsedMessage = JSON.parse(json)\r\n                } catch(e) {\r\n                    // TODO: decide how to handle parse errors\r\n                    this.errorFilter(e)\r\n                    this.errorFilter(new Error(\"Error parsing JSON: \" + json))\r\n                    return\r\n                }\r\n\r\n                // check if it's a reply\r\n                if (parsedMessage.id) {\r\n                    const pending = this.pendingMessages[parsedMessage.id]\r\n                    if (pending) {\r\n                        // clear pending message\r\n                        delete this.pendingMessages[parsedMessage.id]\r\n\r\n                        // resolve or reject the promise depending on the parsed message data\r\n                        if (parsedMessage.error) {\r\n                            this.errorFilter(parsedMessage.error)\r\n                            pending.reject(parsedMessage.error)\r\n                            return\r\n                        } else {\r\n                            pending.resolve(parsedMessage.result)\r\n                        }\r\n                    }\r\n\r\n                    // TODO: decide how to handle unknown responses from server\r\n                    return\r\n                }\r\n\r\n                // it's a notification, fire an event\r\n                this.subscriptionManager.broadcast(parsedMessage.method!, parsedMessage.params!)\r\n            }\r\n        })\r\n    }\r\n\r\n    public call<T>(message: IReturn<T>): Promise<T>\r\n    public call(message: IReturnVoid): Promise<any>\r\n    public async call<T>(message: IReturn<T> | IReturnVoid): Promise<any> {\r\n        if (!this.connected) {\r\n            await this.connect()\r\n        }\r\n\r\n        return await this.callCore(message)\r\n    }\r\n\r\n    private callCore<T>(message: IReturn<T> | IReturnVoid): Promise<any> {\r\n        const name = this.nameOf(message)\r\n        const messageId = this.generateMessageId()\r\n        const msg = new RequestMessage(name, message, messageId)\r\n        const serialized = JSON.stringify(msg)\r\n\r\n        // prepare pending message\r\n        const pendingMessage = new PendingMessage(messageId)\r\n        this.pendingMessages[messageId] = pendingMessage\r\n\r\n        // return a promise awaiting the results of the call\r\n        return pendingMessage.promise = new Promise((resolve, reject) => {\r\n            // store resolve/reject callbacks for later use\r\n            pendingMessage.resolve = resolve\r\n            pendingMessage.reject = reject\r\n\r\n            // fail early if not connected\r\n            if (this.webSocket === undefined || !this.connected) {\r\n                delete this.pendingMessages[messageId]\r\n                const e = new Error(\"WebSocket not connected\")\r\n                this.errorFilter(e)\r\n                reject(e)\r\n                return\r\n            }\r\n\r\n            // trace outcoming message\r\n            this.traceMessage({\r\n                isOutcoming: true,\r\n                data: serialized\r\n            })\r\n\r\n            // send it\r\n            this.webSocket.send(serialized)\r\n        })\r\n    }\r\n\r\n    // one-way calls\r\n    public async notify<T>(message: IReturn<T> | IReturnVoid): Promise<void> {\r\n        if (!this.connected) {\r\n            await this.connect()\r\n        }\r\n\r\n        const name = this.nameOf(message)\r\n        const msg = new RequestMessage(name, message)\r\n        const serialized = JSON.stringify(msg)\r\n\r\n        // fail if not connected\r\n        if (this.webSocket === undefined || !this.connected) {\r\n            const e = new Error(\"WebSocket not connected\")\r\n            this.errorFilter(e)\r\n            throw e\r\n        }\r\n\r\n        // trace outcoming message\r\n        this.traceMessage({\r\n            isOutcoming: true,\r\n            data: serialized\r\n        })\r\n\r\n        // send it\r\n        this.webSocket.send(serialized)\r\n    }\r\n\r\n    // outgoing message ids\r\n    private lastMessageId = 0\r\n    private generateMessageId() {\r\n        return ++this.lastMessageId + \"\"\r\n    }\r\n\r\n    // stolen from the ServiceStack client\r\n    public nameOf(o: any) {\r\n        if (!o) {\r\n            return \"null\"\r\n        }\r\n\r\n        if (typeof o.getTypeName === \"function\") {\r\n            return o.getTypeName()\r\n        }\r\n\r\n        const ctor = o && o.constructor\r\n        if (ctor === null) {\r\n            const e = new Error(`${o} doesn't have constructor`)\r\n            this.errorFilter(e)\r\n            throw e\r\n        }\r\n\r\n        if (ctor.name) {\r\n            return ctor.name\r\n        }\r\n\r\n        const str = ctor.toString()\r\n        return str.substring(9, str.indexOf(\"(\")) // \"function \".length == 9\r\n    }\r\n\r\n    private subscriptionManager = new ClientSubscriptionManager()\r\n\r\n    // returns unsubscription function\r\n    public async subscribe(event: ISubscription): Promise<() => Promise<void>> {\r\n        if (!this.connected) {\r\n            await this.connect()\r\n        }\r\n\r\n        const cs = new ClientSubscription()\r\n        cs.subscriptionId = this.generateMessageId()\r\n        cs.eventName = event.eventName\r\n        cs.eventHandler = event.eventHandler\r\n        cs.eventFilter = event.eventFilter\r\n\r\n        // notify the server about the new subscription\r\n        const subMessage = cs.createSubscriptionMessage()\r\n        await this.call(subMessage)\r\n\r\n        // return async unsubscription\r\n        const unsubscribe = this.subscriptionManager.add(cs)\r\n        const unsubMessage = cs.createUnsubscriptionMessage()\r\n        return async () => {\r\n            unsubscribe()\r\n            await this.call(unsubMessage)\r\n        }\r\n    }\r\n}\r\n\r\nexport default JsonClient\r\n","export class VersionResponse {\r\n    public ProductName!: string\r\n    public ProductVersion!: string\r\n    public EngineVersion!: string\r\n}\r\n","import { IReturn } from \"../IReturn\"\r\nimport { VersionResponse } from \"./VersionResponse\"\r\n\r\nexport class VersionRequest implements IReturn<VersionResponse> {\r\n    public getTypeName() {\r\n        return \"rpc.version\"\r\n    }\r\n    public createResponse(): VersionResponse {\r\n        return new VersionResponse()\r\n    }\r\n}"],"names":["AuthResponse","AuthRequest","EventFilter","matches","eventFilter","eventArgs","undefined","Object","keys","length","key","prototype","hasOwnProperty","call","filterValue","propertyValue","valueMatches","toString","stringMatches","numberMatches","boolMatches","toLowerCase","indexOf","value","parts","split","findIndex","v","trim","SubscriptionMessage","messageName","ClientSubscription","eventHandler","msg","Subscriptions","Enabled","EventName","eventName","SubscriptionId","subscriptionId","createSubscriptionMessage","ClientSubscriptionManager","EventEmitter","subscription","subscriptions","emitter","on","invoke","off","emit","CredentialsBase","credentials","parameters","userNameKey","userName","passwordKey","password","authenticate","client","Parameters","response","SessionId","LogoutMessage","getTypeName","PendingMessage","id","promise","RequestMessage","method","params","JsonClient","url","options","reconnect","reconnectInterval","maxReconnects","_","bind","notify","subscribe","generateMessageId","nameOf","disconnect","webSocket","connected","close","connectPromise","rejectPendingMessages","closeEvent","message","code","error","Error","defineProperty","messageId","pendingMessages","pending","errorFilter","reject","connect","creds","Promise","resolve","sessionId","WebSocket","onerror","e","onopen","reconnects","onclose","setTimeout","onmessage","traceMessage","isOutcoming","data","json","ArrayBuffer","Buffer","from","parsedMessage","JSON","parse","result","subscriptionManager","broadcast","callCore","name","serialized","stringify","pendingMessage","send","lastMessageId","o","ctor","constructor","str","substring","event","cs","subMessage","unsubscribe","add","unsubMessage","createUnsubscriptionMessage","VersionResponse","VersionRequest","createResponse"],"mappings":"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"}